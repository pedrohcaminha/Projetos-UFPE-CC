// adicionar estas duas vari√°veis para a classe
std::vector<vec3> texture_buffer; 
int texture_width, texture_height;

void decodeOneStep(const char* file_path) {
    std::vector<unsigned char> png;
    std::vector<unsigned char> image; //the raw pixels
    unsigned width, height;
    lodepng::State state; //optionally customize this one

    unsigned error = lodepng::load_file(png, file_path); //load the image file with given file_path
    if(!error) error = lodepng::decode(image, width, height, state, png);

    //if there's an error, display it
    if(error) std::cout << "decoder error " << error << ": "<< lodepng_error_text(error) << std::endl;

    //the pixels are now in the vector "image", 4 bytes per pixel, ordered RGBARGBA..., use it as texture, draw it, ...
    texture_buffer.reserve( (int)width*(int)height);
    for(int i = 0; i < image.size(); i+=4)
        texture_buffer.push_back(vec3( float(image[i]), float(image[i+1]), float(image[i+2]) ) );
    
    texture_width = (int)width;
    texture_height = (int)height;
}